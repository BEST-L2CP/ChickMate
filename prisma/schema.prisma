// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth 모델 정의
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user_id       String
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime  @default(now())     @map("created_at")
  updatedAt          DateTime  @updatedAt          @map("updated_at")
  password           String?
  userMetaData       Json?                         @map("user_meta_data")

  accounts           Account[]
  sessions           Session[]
  characters         Character[]
  resumes            Resume[]
  interviewHistorys  InterviewHistory[]
  userSelectedJobs   UserSelectedJob[]
  samples            Sample[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Sample {
  id        Int      @id @default(autoincrement())
  title     String
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sample")
}

model Character {
  id          Int                @id @default(autoincrement())
  userId      String             @map("user_id")
  type        String             
  level       Int                @default(0)
  experience  Int                @default(0)
  createdAt   DateTime           @default(now()) @map("created_at")

  user        User               @relation(fields: [userId], references: [id])
  characterHistories CharacterHistory[] 

  @@map("character")
}

model CharacterHistory {
  id          Int       @id @default(autoincrement())
  characterId Int       @map("character_id")
  history     Json      
  experience  Int
  createdAt   DateTime  @default(now()) @map("created_at")

  character   Character @relation(fields: [characterId], references: [id])

  @@map("character_history")
}

model Resume {
  id                  Int      @id @default(autoincrement())
  title               String   @default("제목 없음") 
  userId              String   @map("user_id")
  status              Int      @default(0)
  content             Json?    
  tryCount            Int      @default(0) @map("try_count")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @default(now()) @map("updated_at")

  InterviewHistories  InterviewHistory[]

  user                User     @relation(fields: [userId], references: [id])

  @@map("resume")
}

model InterviewHistory {
  id                  Int      @id @default(autoincrement())
  userId              String   @map("user_id")
  resumeId            Int      @map("resume_id")
  feedback            Json?   
  content             Json?    
  createdAt           DateTime @default(now()) @map("created_at")
  interviewType       String   @map("interview_type")
  user                User     @relation(fields: [userId], references: [id])
  resume              Resume   @relation(fields: [resumeId], references: [id])

  @@map("interview_history")
}

model JobPosting {
  id               Int               @id @default(autoincrement())
  title            String
  company          String
  location         Json
  experienceType   String            @map("experience_type")
  url              String
  jobType          String            @map("job_type")
  employmentType   String            @map("employment_type")
  educationLevel   String            @map("education_level")
  postedAt         DateTime          @map("posted_at")
  expiredAt        DateTime          @map("expired_at")
  createdAt        DateTime          @default(now()) @map("created_at")

  userSelectedJobs UserSelectedJob[]

  @@map("job_posting")
}

model UserSelectedJob {
  id           Int        @id @default(autoincrement())
  userId       String     @map("user_id")
  jobPostingId Int        @map("job_posting_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  jobPosting   JobPosting @relation(fields: [jobPostingId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@map("user_selected_job")
}

model Jobs {
  id    Int    @id @default(autoincrement())
  name  String
  value String

  @@map("jobs")
}

model MainRegion {
  id         Int        @id @default(autoincrement())
  name       String
  value      String
  subRegions SubRegion[]

  @@map("main_region")
}

model SubRegion {
  id           Int        @id @default(autoincrement())
  mainRegionId Int        @map("mainRegion_id")
  name         String
  value        String
  mainRegion   MainRegion @relation(fields: [mainRegionId], references: [id])

  @@map("sub_region")
}


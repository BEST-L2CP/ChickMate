// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        String   @id @default(cuid())
  title     String
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

// NextAuth 모델 정의
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user_id       String
  expires      DateTime
  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  user_meta_data Json?
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  characters    Character[]
  personalStatements PersonalStatement[]
  interviewHistorys InterviewHistory[]
  userSelectedJobs UserSelectedJob[]
  samples Sample[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Character {
  id           String   @id @default(cuid())
  user_id      String
  character_id String
  level        Int
  experience   Int
  created_at   DateTime @default(now())
  user         User     @relation(fields: [user_id], references: [id])
}

model PersonalStatement {
  id         String   @id @default(cuid())
  user_id     String
  content    Json
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
}

model InterviewHistory {
  id                    String   @id @default(cuid())
  user_id               String
  personal_statement_id String?
  feedback             String
  question_content      Json
  answer_content        Json
  created_at            DateTime @default(now())
  interview_type        String
  user                  User     @relation(fields: [user_id], references: [id])
}

model JobPosting {
  id                String               @id @default(cuid())
  title             String
  company           String
  location          String
  employment_type    String
  salary_type        String
  salary_amount      Int
  posted_at          DateTime
  deadline          DateTime
  created_at        DateTime            @default(now())
  userSelectedJobs  UserSelectedJob[]
}

model UserSelectedJob {
  id             String       @id @default(cuid())
  user_id        String
  job_posting_id  String
  selected_at    DateTime
  created_at     DateTime    @default(now())
  jobPosting    JobPosting  @relation(fields: [job_posting_id], references: [id])
  user          User        @relation(fields: [user_id], references: [id])
}